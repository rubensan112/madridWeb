# Generated by Django 2.1.7 on 2019-02-22 13:40

import backend.authentication.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserORM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'An user with that username already exists.'}, help_text='Required. 25 characters or fewer. Letters, digits and ./_/ -.', max_length=25, unique=True, validators=[backend.authentication.validators.username_validator])),
                ('password', models.CharField(max_length=128, null=True, verbose_name='Password')),
                ('email', models.EmailField(error_messages={'unique': 'This email has an account already assigned.'}, help_text='Required. 70 characters or fewer. Email valid characters only.', max_length=70, unique=True, validators=[django.core.validators.EmailValidator()], verbose_name='E-mail address')),
                ('name', models.CharField(blank=True, help_text='40 characters or fewer. Name of the user', max_length=40, verbose_name='Name')),
                ('last_name', models.CharField(blank=True, help_text='50 characters or fewer. Surname of the user', max_length=50, verbose_name='Last name')),
                ('is_local', models.BooleanField(default=True, help_text='Designates whether the user is local or should be logged against external resource', verbose_name='Local account')),
                ('is_admin', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='Admin account')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Deselect this instead of deleting accounts.', verbose_name='Active status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date when user account was created')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'backend.authentication_user',
            },
        ),
    ]
